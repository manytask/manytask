"""Add is_large flag to Task

Revision ID: e64fbb93da7d
Revises: b608e9f744f4
Create Date: 2025-06-17 14:40:41.170829

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import manytask


# revision identifiers, used by Alembic.
revision: str = 'e64fbb93da7d'
down_revision: Union[str, None] = 'b608e9f744f4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('gitlab_instance_host', sa.String(), nullable=False),
    sa.Column('registration_secret', sa.String(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('show_allscores', sa.Boolean(), nullable=False),
    sa.Column('is_ready', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('gitlab_course_group', sa.String(), nullable=False),
    sa.Column('gitlab_course_public_repo', sa.String(), nullable=False),
    sa.Column('gitlab_course_students_group', sa.String(), nullable=False),
    sa.Column('gitlab_default_branch', sa.String(), nullable=False),
    sa.Column('task_url_template', sa.String(), nullable=False),
    sa.Column('links', manytask.models.StrStrDict(), server_default='{}', nullable=False),
    sa.Column('timezone', sa.String(), server_default='UTC', nullable=False),
    sa.Column('max_submissions', sa.Integer(), nullable=True),
    sa.Column('submission_penalty', sa.Float(), server_default='0', nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_courses')),
    sa.UniqueConstraint('name', name='uq_courses_name'),
    sa.UniqueConstraint('name', name=op.f('uq_courses_name')),
    sa.UniqueConstraint('token', name='uq_courses_token'),
    sa.UniqueConstraint('token', name=op.f('uq_courses_token'))
    )
    op.create_table('deadlines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start', sa.DateTime(timezone=True), server_default='2000-01-01 00:00:00+00:00', nullable=False),
    sa.Column('steps', manytask.models.FloatDatetimeDict(), server_default='{}', nullable=False),
    sa.Column('end', sa.DateTime(timezone=True), server_default='3000-01-01 00:00:00+00:00', nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_deadlines'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('gitlab_instance_host', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('username', 'gitlab_instance_host', name='_username_gitlab_instance_uc')
    )
    op.create_table('task_groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('deadline_id', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('position', sa.Integer(), server_default='0', nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name=op.f('fk_task_groups_course_id_courses')),
    sa.ForeignKeyConstraint(['deadline_id'], ['deadlines.id'], name=op.f('fk_task_groups_deadline_id_deadlines')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_groups'))
    )
    op.create_table('users_on_courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('repo_name', sa.String(), nullable=False),
    sa.Column('join_date', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_course_admin', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name=op.f('fk_users_on_courses_course_id_courses')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_users_on_courses_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users_on_courses')),
    sa.UniqueConstraint('user_id', 'course_id', name='_user_course_uc')
    )
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Integer(), server_default='0', nullable=False),
    sa.Column('is_bonus', sa.Boolean(), nullable=False),
    sa.Column('is_large', sa.Boolean(), nullable=False),
    sa.Column('is_special', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('enabled', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('position', sa.Integer(), server_default='0', nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['task_groups.id'], name=op.f('fk_tasks_group_id_task_groups')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_table('grades',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_on_course_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('last_submit_date', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_grades_task_id_tasks')),
    sa.ForeignKeyConstraint(['user_on_course_id'], ['users_on_courses.id'], name=op.f('fk_grades_user_on_course_id_users_on_courses')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_grades')),
    sa.UniqueConstraint('user_on_course_id', 'task_id', name='_user_on_course_task_uc')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('grades')
    op.drop_table('tasks')
    op.drop_table('users_on_courses')
    op.drop_table('task_groups')
    op.drop_table('users')
    op.drop_table('deadlines')
    op.drop_table('courses')
    # ### end Alembic commands ###
